{"version":3,"sources":["components/VideoChat.tsx","components/PeerJs.tsx","App.tsx","../node_modules/peerjs/dist sync"],"names":["VideoChat","props","console","log","peerStreams","width","height","length","style","position","top","right","marginBottom","marginTop","map","stream","url","playing","id","userStream","PeerJs","useState","setId","Peer","peer","friendId","setFriendId","linkCopied","setLinkCopied","setDataConnection","mediaConnection","setMediaConnection","setPeerStreams","setUserStream","shareScreen","setShareScreen","friend","URLSearchParams","useLocation","search","get","handleNewPeer","handlePeerDataConnection","conn","addDataConnectionListeners","handlePeerRecieveMediaCall","call","a","constraints","audio","video","navigator","mediaDevices","getDisplayMedia","getUserMedia","answer","addMediaConectionListeners","on","data","error","useEffect","Input","onChange","event","target","value","placeholder","Button","variant","color","onClick","margin","fontSize","link","window","location","protocol","host","clipboard","writeText","Switch","checked","name","inputProps","close","getTracks","forEach","track","stop","App","className","webpackEmptyContext","req","e","Error","code","keys","resolve","module","exports"],"mappings":"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","file":"static/js/4.fbced82a.chunk.js","sourcesContent":["import React from 'react'\nimport ReactPlayer from 'react-player'\n\nexport default function VideoChat(props: any) {\n    console.log(props.peerStreams);\n    let width = \"100%\";\n    let height = \"100%\";\n    if (props.peerStreams.length > 0) {\n        width = `${100 / props.peerStreams.length}%`\n        height = `${100 / props.peerStreams.length}%`\n    }\n\n    return (\n        <div style={{ position: \"relative\", top: 0, right: 0, marginBottom: 25, marginTop: 25 }} >\n            <ul>\n                {props.peerStreams?.map((stream: MediaStream) => (\n                    <li key={stream.id}>\n                        <ReactPlayer url={stream} playing={true} width={width} height={height} />\n                    </li>\n                ))}\n            </ul>\n            <div style={{ position: \"absolute\", top: 0, right: 0 }}>\n                <ReactPlayer url={props.userStream} playing={true} width=\"25%\" height=\"25%\" />\n            </div>\n        </div>\n    )\n}\n","import Peer, { DataConnection, MediaConnection } from 'peerjs';\nimport React, { useState, useEffect } from 'react'\nimport { Button, Input, TextField } from '@material-ui/core';\nimport VideoChat from \"./VideoChat\";\nimport { Switch } from '@material-ui/core/';\nimport VideoCallIcon from '@material-ui/icons/VideoCall';\nimport ShareIcon from '@material-ui/icons/Share';\nimport { useLocation } from \"react-router-dom\";\n\nexport default function PeerJs() {\n    const [id, setId] = useState(\"\");\n    const [peer, setPeer] = useState(new Peer());\n    const [friendId, setFriendId] = useState('');\n    const [linkCopied, setLinkCopied] = useState(false);\n    const [dataConnection, setDataConnection] = useState<DataConnection | null>(null);\n    const [mediaConnection, setMediaConnection] = useState<MediaConnection | null>(null);\n    const [peerStreams, setPeerStreams] = useState<MediaStream[] | []>([]);\n    const [userStream, setUserStream] = useState<MediaStream | null>(null);\n    const [shareScreen, setShareScreen] = useState<boolean>(false);\n\n    function useQuery() {\n        return new URLSearchParams(useLocation().search);\n    }\n\n    // Clean this up later\n    let query = useQuery();\n    let friend = query.get(\"friend\");\n    if (friend && friendId == '') {\n        setFriendId(friend);\n    }\n\n    function handleNewPeer(id: string) {\n        setId(id)\n    }\n\n    function handlePeerDataConnection(conn: DataConnection) {\n        conn = addDataConnectionListeners(conn);\n        setDataConnection(conn);\n        setFriendId(conn.peer);\n    }\n\n    function getAvailableConstraints() {\n        // TODO: Get specific constraints\n        return { audio: false, video: true };\n    }\n\n    async function handlePeerRecieveMediaCall(call: MediaConnection) {\n        // TODO: Add an answer or decline prompt\n        setFriendId(call.peer);\n        let constraints = getAvailableConstraints();\n        try {\n            let stream;\n            if (shareScreen) {\n                // @ts-ignore\n                stream = await navigator.mediaDevices.getDisplayMedia(constraints);\n            } else {\n                stream = await navigator.mediaDevices.getUserMedia(constraints);\n            }\n\n            call.answer(stream);\n            setUserStream(stream);\n            call = addMediaConectionListeners(call);\n            setMediaConnection(call);\n        } catch (error) {\n            console.log(error);\n        }\n    }\n\n    function addDataConnectionListeners(conn: DataConnection) {\n        conn.on('open', () => {\n            console.log(\"Connected opened with peer: \" + conn.peer);\n        });\n        conn.on('data', (data: any) => {\n            // TODO: Set this to state.\n            console.log(data);\n        });\n        conn.on('close', () => {\n            // Handle error\n            console.log(\"Connection closed.\");\n        });\n        conn.on('error', (error: any) => {\n            // Handle error\n            console.log(error);\n        });\n        return conn;\n    }\n\n    function addMediaConectionListeners(call: MediaConnection) {\n        call.on('stream', (stream) => setPeerStreams(peerStreams => [...peerStreams, stream]));\n        call.on('error', (error: any) => console.log(error));\n        call.on('close', function () {\n            setPeerStreams(() => []);\n            setMediaConnection(null);\n        });\n        return call;\n    }\n\n    function stopAllStreams() {\n        // @ts-ignore\n        userStream?.getTracks().forEach(track => track.stop());\n        peerStreams?.forEach((stream: MediaStream) => stream.getTracks().forEach(track => track.stop()));\n        setUserStream(null);\n        setPeerStreams(() => []);\n    }\n\n    useEffect(() => {\n        peer.on('open', handleNewPeer);\n        peer.on('connection', handlePeerDataConnection);\n        peer.on('call', handlePeerRecieveMediaCall);\n        console.log(\"Peer initialized\");\n    }, [peer]);\n\n    function send(conn: DataConnection) {\n        conn.send('Hello!');\n    }\n\n    function connect() {\n        let conn = peer.connect(friendId);\n        conn = addDataConnectionListeners(conn);\n        setDataConnection(conn);\n    }\n\n    function disconnectMediaConnection() {\n        mediaConnection?.close()\n        setMediaConnection(null);\n        stopAllStreams();\n    }\n\n    async function call() {\n        try {\n            let stream;\n            if (shareScreen) {\n                // @ts-ignore\n                stream = await navigator.mediaDevices.getDisplayMedia({ audio: false, video: true });\n            } else {\n                stream = await navigator.mediaDevices.getUserMedia({ audio: false, video: true });\n            }\n\n            let call = peer.call(friendId, stream);\n            call = addMediaConectionListeners(call);\n            setMediaConnection(call);\n            setUserStream(stream);\n        } catch (error) {\n            console.log(error);\n        }\n    }\n\n    const handleSwitchChange = (event: any) => {\n        setShareScreen(event.target.checked)\n    };\n\n    function generateLink() {\n        if (id) {\n            let link = window.location.protocol + \"//\" + window.location.host + \"/?friend=\" + id\n            navigator.clipboard.writeText(\"Hey Friend! Give me a call using this link :\\n\" + link)\n            setLinkCopied(true);\n        }\n    }\n\n    return (\n        <div>\n            <Input onChange={event => setFriendId(event.target.value)} placeholder=\"Caller ID\" />\n            {/* <Button variant=\"contained\" color=\"primary\" onClick={send}> Send </Button>\n            <Button variant=\"contained\" color=\"primary\" onClick={connect}> Conect </Button> */}\n            <Button variant=\"contained\" color=\"primary\" onClick={call} style={{ margin: 10 }}> <VideoCallIcon fontSize=\"large\" /> </Button>\n\n            <Button variant=\"contained\" color=\"primary\" onClick={generateLink}> <ShareIcon fontSize=\"large\" /> </Button>\n            {linkCopied ? <div style={{ fontSize: 15, color: \"green\" }}>Link copied to clipboard</div> : null}\n            <br />\n            <Switch\n                checked={shareScreen}\n                onChange={handleSwitchChange}\n                color=\"primary\"\n                name=\"checkedB\"\n                inputProps={{ 'aria-label': 'primary checkbox' }}\n            /> Share Screen\n            < div >\n                {\"Your Caller ID: \" + id}\n                < br />\n                {(friendId != '') ? \"Connecting to: \" + friendId : null}\n            </div >\n            <VideoChat peerStreams={peerStreams} userStream={userStream} />\n            <div>\n                {\n                    mediaConnection\n                        ? <Button variant=\"contained\" color=\"secondary\" onClick={disconnectMediaConnection}> Disconnect </Button>\n                        : null\n                }\n\n            </div>\n        </div >\n    )\n}\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n// import InstallButton from './components/InstallButton';\nimport RequestButton from './components/RequestButton';\nimport PeerJs from './components/PeerJs';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        {/* <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p> Hello James </p> */}\n        {/* <InstallButton /> */}\n        {/* <RequestButton /> */}\n        <PeerJs />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 67;"],"sourceRoot":""}