{"version":3,"sources":["components/VideoChat.tsx","components/PeerJs.tsx","App.tsx","../node_modules/peerjs/dist sync"],"names":["VideoChat","props","console","log","peerStreams","width","height","length","style","position","top","right","marginBottom","marginTop","map","stream","url","playing","id","userStream","PeerJs","useState","setId","Peer","peer","friendId","setFriendId","setDataConnection","mediaConnection","setMediaConnection","setPeerStreams","setUserStream","shareScreen","setShareScreen","handleNewPeer","handlePeerDataConnection","conn","addDataConnectionListeners","handlePeerRecieveMediaCall","call","a","constraints","audio","video","navigator","mediaDevices","getDisplayMedia","getUserMedia","answer","addMediaConectionListeners","on","data","error","useEffect","Input","onChange","event","target","value","Button","variant","color","onClick","fontSize","Switch","checked","name","inputProps","close","getTracks","forEach","track","stop","App","className","webpackEmptyContext","req","e","Error","code","keys","resolve","module","exports"],"mappings":"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","file":"static/js/4.027f4c94.chunk.js","sourcesContent":["import React from 'react'\nimport ReactPlayer from 'react-player'\n\nexport default function VideoChat(props: any) {\n    console.log(props.peerStreams);\n    let width = \"100%\";\n    let height = \"100%\";\n    if (props.peerStreams.length > 0) {\n        width = `${100 / props.peerStreams.length}%`\n        height = `${100 / props.peerStreams.length}%`\n    }\n\n    return (\n        <div style={{ position: \"relative\", top: 0, right: 0, marginBottom: 25, marginTop: 25 }} >\n            <ul>\n                {props.peerStreams?.map((stream: MediaStream) => (\n                    <li key={stream.id}>\n                        <ReactPlayer url={stream} playing={true} width={width} height={height} />\n                    </li>\n                ))}\n            </ul>\n            <div style={{ position: \"absolute\", top: 0, right: 0 }}>\n                <ReactPlayer url={props.userStream} playing={true} width=\"25%\" height=\"25%\" />\n            </div>\n        </div>\n    )\n}\n","import Peer, { DataConnection, MediaConnection } from 'peerjs';\nimport React, { useState, useEffect } from 'react'\nimport { Button, Input } from '@material-ui/core';\nimport VideoChat from \"./VideoChat\";\nimport { Switch } from '@material-ui/core/';\nimport VideoCallIcon from '@material-ui/icons/VideoCall';\n\nexport default function PeerJs() {\n\n    const [id, setId] = useState(\"\");\n    const [peer, setPeer] = useState(new Peer());\n    const [friendId, setFriendId] = useState('');\n    const [dataConnection, setDataConnection] = useState<DataConnection | null>(null);\n    const [mediaConnection, setMediaConnection] = useState<MediaConnection | null>(null);\n    const [peerStreams, setPeerStreams] = useState<MediaStream[] | []>([]);\n    const [userStream, setUserStream] = useState<MediaStream | null>(null);\n    const [shareScreen, setShareScreen] = useState<boolean>(false);\n\n    function handleNewPeer(id: string) {\n        setId(id)\n    }\n\n    function handlePeerDataConnection(conn: DataConnection) {\n        conn = addDataConnectionListeners(conn);\n        setDataConnection(conn);\n        setFriendId(conn.peer);\n    }\n\n    function getAvailableConstraints() {\n        // TODO: Get specific constraints\n        return { audio: false, video: true };\n    }\n\n    async function handlePeerRecieveMediaCall(call: MediaConnection) {\n        // TODO: Add an answer or decline prompt\n        setFriendId(call.peer);\n        let constraints = getAvailableConstraints();\n        try {\n            let stream;\n            if (shareScreen) {\n                // @ts-ignore\n                stream = await navigator.mediaDevices.getDisplayMedia(constraints);\n            } else {\n                stream = await navigator.mediaDevices.getUserMedia(constraints);\n            }\n\n            call.answer(stream);\n            setUserStream(stream);\n            call = addMediaConectionListeners(call);\n            setMediaConnection(call);\n        } catch (error) {\n            console.log(error);\n        }\n    }\n\n    function addDataConnectionListeners(conn: DataConnection) {\n        conn.on('open', () => {\n            console.log(\"Connected opened with peer: \" + conn.peer);\n        });\n        conn.on('data', (data: any) => {\n            // TODO: Set this to state.\n            console.log(data);\n        });\n        conn.on('close', () => {\n            // Handle error\n            console.log(\"Connection closed.\");\n        });\n        conn.on('error', (error: any) => {\n            // Handle error\n            console.log(error);\n        });\n        return conn;\n    }\n\n    function addMediaConectionListeners(call: MediaConnection) {\n        call.on('stream', (stream) => setPeerStreams(peerStreams => [...peerStreams, stream]));\n        call.on('error', (error: any) => console.log(error));\n        call.on('close', function () {\n            setPeerStreams(() => []);\n            setMediaConnection(null);\n        });\n        return call;\n    }\n\n    function stopAllStreams() {\n        // @ts-ignore\n        userStream?.getTracks().forEach(track => track.stop());\n        peerStreams?.forEach((stream: MediaStream) => stream.getTracks().forEach(track => track.stop()));\n        setUserStream(null);\n        setPeerStreams(() => []);\n    }\n\n    useEffect(() => {\n        peer.on('open', handleNewPeer);\n        peer.on('connection', handlePeerDataConnection);\n        peer.on('call', handlePeerRecieveMediaCall);\n        console.log(\"Peer initialized\");\n    }, [peer]);\n\n    function send(conn: DataConnection) {\n        conn.send('Hello!');\n    }\n\n    function connect() {\n        let conn = peer.connect(friendId);\n        conn = addDataConnectionListeners(conn);\n        setDataConnection(conn);\n    }\n\n    function disconnectMediaConnection() {\n        mediaConnection?.close()\n        setMediaConnection(null);\n        stopAllStreams();\n    }\n\n    async function call() {\n        try {\n            let stream;\n            if (shareScreen) {\n                // @ts-ignore\n                stream = await navigator.mediaDevices.getDisplayMedia({ audio: false, video: true });\n            } else {\n                stream = await navigator.mediaDevices.getUserMedia({ audio: false, video: true });\n            }\n\n            let call = peer.call(friendId, stream);\n            call = addMediaConectionListeners(call);\n            setMediaConnection(call);\n            setUserStream(stream);\n        } catch (error) {\n            console.log(error);\n        }\n    }\n\n    const handleSwitchChange = (event: any) => {\n        setShareScreen(event.target.checked)\n    };\n\n    return (\n        <div>\n            <Input onChange={event => setFriendId(event.target.value)} />\n            {/* <Button variant=\"contained\" color=\"primary\" onClick={send}> Send </Button>\n            <Button variant=\"contained\" color=\"primary\" onClick={connect}> Conect </Button> */}\n            <Button variant=\"contained\" color=\"primary\" onClick={call}> <VideoCallIcon fontSize=\"large\" /> </Button>\n            <Switch\n                checked={shareScreen}\n                onChange={handleSwitchChange}\n                color=\"primary\"\n                name=\"checkedB\"\n                inputProps={{ 'aria-label': 'primary checkbox' }}\n            /> Share Screen\n            <div>\n                {\"MY ID: \" + id}\n                <br />\n                {\"Connecting to: \" + friendId}\n            </div>\n            <VideoChat peerStreams={peerStreams} userStream={userStream} />\n            <div>\n                {\n                    mediaConnection\n                        ? <Button variant=\"contained\" color=\"secondary\" onClick={disconnectMediaConnection}> Disconnect </Button>\n                        : null\n                }\n\n            </div>\n        </div >\n    )\n}\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n// import InstallButton from './components/InstallButton';\nimport RequestButton from './components/RequestButton';\nimport PeerJs from './components/PeerJs';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        {/* <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p> Hello James </p> */}\n        {/* <InstallButton /> */}\n        {/* <RequestButton /> */}\n        <PeerJs />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 50;"],"sourceRoot":""}