{"version":3,"sources":["components/VideoChat.tsx","components/PeerJs.tsx","App.tsx","../node_modules/peerjs/dist sync"],"names":["VideoChat","props","width","height","peerStreams","length","style","position","top","right","marginBottom","marginTop","url","userStream","playing","borderRadius","bottom","left","Button","variant","color","onClick","onDisconnect","fontSize","PeerJs","useState","id","setId","Peer","peer","friendId","setFriendId","linkCopied","setLinkCopied","dataConnection","setDataConnection","mediaConnection","setMediaConnection","setPeerStreams","setUserStream","shareScreen","setShareScreen","setIncomingCall","friend","URLSearchParams","useLocation","search","get","handleNewPeer","handlePeerDataConnection","conn","addDataConnectionListeners","getUserStream","a","constraints","audio","video","frameRate","ideal","exact","navigator","mediaDevices","getDisplayMedia","stream","getUserMedia","console","log","handlePeerRecieveMediaCall","call","answer","addMediaConectionListeners","on","data","peerId","forEach","getTracks","track","stop","getVideoTracks","filter","stopAllStreams","error","connect","useEffect","handleSwitchChange","event","target","checked","generateLink","link","window","location","protocol","host","clipboard","writeText","Input","onChange","value","placeholder","margin","Switch","name","inputProps","close","App","className","webpackEmptyContext","req","e","Error","code","keys","resolve","module","exports"],"mappings":"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","file":"static/js/4.1bfc0aa3.chunk.js","sourcesContent":["import React, { useEffect } from 'react'\nimport ReactPlayer from 'react-player'\nimport { Button } from '@material-ui/core';\nimport CallEndIcon from '@material-ui/icons/CallEnd';\n\nexport default function VideoChat(props: any) {\n    // console.log(props.peerStreams);\n    let width = \"100%\";\n    let height = \"100%\";\n    if (props.peerStreams.length > 0) {\n        width = `${100 / props.peerStreams.length}%`\n        height = `${100 / props.peerStreams.length}%`\n    }\n\n    function onDisconnect() {\n        props.onDisconnect()\n    }\n\n\n    return (\n        <div style={{ position: \"relative\", top: 0, right: 0, marginBottom: 25, marginTop: 25 }} >\n            <div style={{ position: \"absolute\", top: 7, right: 7 }}>\n                <ReactPlayer url={props.userStream} playing={true} width=\"25%\" height=\"25%\" style={{ borderRadius: 100 }} />\n            </div>\n            {/* <ul style={{ listStyle: \"none\" }}>\n                {props.peerStreams?.map((stream: MediaStream) => (\n                    <li key={stream.id}>\n                        <ReactPlayer url={stream} playing={true} width={width} height={height} />\n                    </li>\n                ))}\n            </ul> */}\n            <ReactPlayer url={props.peerStreams[0]} playing={true} width={width} height={height} />\n            <div style={{\n                position: 'absolute',\n                bottom: 0,\n                right: 0,\n                left: 0,\n                marginBottom: 25\n            }}>\n                {props.userStream ? <Button style={{ borderRadius: 100 }} variant=\"contained\" color=\"secondary\" onClick={onDisconnect}> <CallEndIcon fontSize=\"large\" /> </Button> : null}\n            </div>\n\n\n        </div>\n    )\n}\n","import Peer, { DataConnection, MediaConnection } from 'peerjs';\nimport React, { useState, useEffect, useCallback } from 'react'\nimport { Button, Input } from '@material-ui/core';\nimport VideoChat from \"./VideoChat\";\nimport { Switch } from '@material-ui/core/';\nimport VideoCallIcon from '@material-ui/icons/VideoCall';\nimport ShareIcon from '@material-ui/icons/Share';\nimport { useLocation } from \"react-router-dom\";\n\nexport default function PeerJs() {\n    const [id, setId] = useState(\"\");\n    const [peer, setPeer] = useState(new Peer());\n    const [friendId, setFriendId] = useState('');\n    const [linkCopied, setLinkCopied] = useState(false);\n    const [dataConnection, setDataConnection] = useState<DataConnection | null>(null);\n    const [mediaConnection, setMediaConnection] = useState<MediaConnection | null>(null);\n    const [peerStreams, setPeerStreams] = useState<MediaStream[] | []>([]);\n    const [userStream, setUserStream] = useState<MediaStream | null>(null);\n    const [shareScreen, setShareScreen] = useState<boolean>(false);\n    const [incomingCall, setIncomingCall] = useState<boolean>(false);\n\n    function useQuery() {\n        return new URLSearchParams(useLocation().search);\n    }\n\n    // Clean this up later\n    let query = useQuery();\n    let friend = query.get(\"friend\");\n    if (friend && friendId === '') {\n        setFriendId(friend);\n    }\n\n    function handleNewPeer(id: string) {\n        setId(id)\n    }\n\n\n    function handlePeerDataConnection(conn: DataConnection) {\n        conn = addDataConnectionListeners(conn);\n        setDataConnection(conn);\n        setFriendId(conn.peer);\n    }\n\n    function getAvailableConstraints() {\n        // TODO: Get specific constraints\n\n        return {\n            audio: false,\n            video: {\n                frameRate: { ideal: 30, exact: 30 },\n                // height: { ideal: 250, max: 500 },\n                // width: { ideal: 250, max: 300 },\n            }\n        };\n    }\n\n    async function getUserStream() {\n        let constraints = getAvailableConstraints();\n        try {\n            let stream: MediaStream;\n            if (shareScreen) {\n                // @ts-ignore\n                stream = await navigator.mediaDevices.getDisplayMedia(constraints);\n            } else {\n                stream = await navigator.mediaDevices.getUserMedia(constraints);\n            }\n            setUserStream(stream);\n            return stream;\n        } catch (error) {\n            console.log(error);\n        }\n    }\n\n    async function handlePeerRecieveMediaCall(call: MediaConnection) {\n        console.log(\"Handling call\");\n        // TODO: Add an answer or decline prompt\n        setIncomingCall(true);\n        setFriendId(call.peer);\n        let stream = await getUserStream();\n        if (stream) {\n            setUserStream(stream);\n            call.answer(stream);\n            call = addMediaConectionListeners(call);\n            setMediaConnection(call);\n        }\n    }\n\n    function addDataConnectionListeners(conn: DataConnection) {\n        conn.on('open', () => {\n            console.log(\"Connected opened with peer: \" + conn.peer);\n            console.log(userStream);\n        });\n        conn.on('data', (data: any) => {\n            // TODO: Set this to state.\n            console.log(data);\n        });\n        conn.on('close', () => {\n            console.log(\"Connection closed.\");\n            // TODO: Fix issue where user streams aren't being stopped on friend close\n            console.log(userStream);\n            stopPeerStream(conn.peer);\n            if (peerStreams.length == 0) {\n                console.log(\"No more peer streams\");\n                stopAllStreams();\n            }\n            setFriendId('');\n        });\n        conn.on('error', (error: any) => {\n            // Handle error\n            console.log(error);\n        });\n        return conn;\n    }\n\n    function addMediaConectionListeners(call: MediaConnection) {\n        call.on('stream', (stream) => setPeerStreams(peerStreams => [...peerStreams, stream]));\n        call.on('error', (error: any) => console.log(error));\n        return call;\n    }\n\n    function stopAllStreams() {\n        if (userStream) {\n            userStream.getTracks().forEach(track => track.stop());\n            userStream.getVideoTracks().forEach(track => track.stop());\n            console.log(\"User stream tracks stopped\");\n            setUserStream(null);\n        }\n        if (peerStreams) {\n            peerStreams.forEach((peer: MediaStream) => {\n                peer.getTracks().forEach(track => track.stop());\n                peer.getVideoTracks().forEach(track => track.stop());\n            });\n            console.log(\"Peer streams stopped\");\n            setMediaConnection(null);\n            setPeerStreams(() => []);\n        }\n        setUserStream(null);\n    }\n\n    function stopPeerStream(peerId: string) {\n        peerStreams?.forEach((stream: MediaStream) => {\n            if (stream.id === peerId) {\n                stream.getTracks().forEach(track => track.stop());\n                stream.getVideoTracks().forEach(track => track.stop());\n            }\n        });\n        setPeerStreams((peerStreams) => peerStreams.filter(stream => stream.id !== peerId));\n    }\n\n    useEffect(() => {\n        peer.on('open', handleNewPeer);\n        peer.on('connection', handlePeerDataConnection);\n        peer.on('call', handlePeerRecieveMediaCall);\n        console.log(\"Peer initialized\");\n    }, []);\n\n    function send(conn: DataConnection) {\n        conn.send('Hello!');\n    }\n\n    function connect() {\n        let conn = peer.connect(friendId);\n        conn = addDataConnectionListeners(conn);\n        setDataConnection(conn);\n    }\n\n    function disconnectMediaConnection() {\n        mediaConnection?.close();\n        dataConnection?.close();\n        setMediaConnection(null);\n        stopAllStreams();\n        setFriendId('');\n    }\n\n    async function call() {\n        let stream = await getUserStream();\n        if (stream) {\n            let call = peer.call(friendId, stream);\n            call = addMediaConectionListeners(call);\n            setMediaConnection(call);\n            setUserStream(stream);\n            connect();\n        }\n    }\n\n    const handleSwitchChange = (event: any) => {\n        setShareScreen(event.target.checked)\n    };\n\n    function generateLink() {\n        if (id) {\n            let link = window.location.protocol + \"//\" + window.location.host + \"/?friend=\" + id\n            navigator.clipboard.writeText(\"Hey Friend! Give me a call using this link :\\n\" + link)\n            setLinkCopied(true);\n        }\n    }\n\n    function callForm() {\n        return (\n            < div >\n                <Input onChange={event => setFriendId(event.target.value)} placeholder=\"Caller ID\" />\n                <br />\n                {/* <Button variant=\"contained\" color=\"primary\" onClick={send}> Send </Button>\n                <Button variant=\"contained\" color=\"primary\" onClick={connect}> Conect </Button> */}\n                <Button variant=\"contained\" color=\"primary\" onClick={call} style={{ margin: 10 }}> <VideoCallIcon fontSize=\"large\" /> </Button>\n\n                <Button variant=\"contained\" color=\"primary\" onClick={generateLink}> <ShareIcon fontSize=\"large\" /> </Button>\n                { linkCopied ? <div style={{ fontSize: 15, color: \"green\" }}>Link copied to clipboard</div> : null}\n                <br />\n                <Switch\n                    checked={shareScreen}\n                    onChange={handleSwitchChange}\n                    color=\"primary\"\n                    name=\"checkedB\"\n                    inputProps={{ 'aria-label': 'primary checkbox' }}\n                /> Share Screen\n                < div >\n                    {\"Your Caller ID: \" + id}\n                    < br />\n                    {(friendId !== '') ? \"Connecting to: \" + friendId : null\n                    }\n                </div >\n            </div >\n        )\n    }\n\n    return (\n        < div >\n            {peerStreams.length > 0 ? null : callForm()}\n            <VideoChat peerStreams={peerStreams} userStream={userStream} onDisconnect={disconnectMediaConnection} />\n            {/* <div>\n                {\n                    mediaConnection\n                        ? <Button variant=\"contained\" color=\"secondary\" onClick={disconnectMediaConnection}> Disconnect </Button>\n                        : null\n                }\n\n            </div> */}\n        </div >\n    )\n}\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n// import InstallButton from './components/InstallButton';\nimport RequestButton from './components/RequestButton';\nimport PeerJs from './components/PeerJs';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        {/* <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p> Hello James </p> */}\n        {/* <InstallButton /> */}\n        {/* <RequestButton /> */}\n        <PeerJs />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 67;"],"sourceRoot":""}