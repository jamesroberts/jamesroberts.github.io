{"version":3,"sources":["components/VideoChat.tsx","components/PeerJs.tsx","App.tsx","../node_modules/peerjs/dist sync"],"names":["VideoChat","props","width","height","peerStreams","length","style","position","top","right","marginBottom","marginTop","map","stream","url","playing","id","userStream","PeerJs","useState","setId","Peer","peer","friendId","setFriendId","linkCopied","setLinkCopied","dataConnection","setDataConnection","mediaConnection","setMediaConnection","setPeerStreams","setUserStream","shareScreen","setShareScreen","friend","URLSearchParams","useLocation","search","get","handleNewPeer","handlePeerDataConnection","conn","addDataConnectionListeners","getUserStream","a","constraints","audio","video","navigator","mediaDevices","getDisplayMedia","getUserMedia","console","log","handlePeerRecieveMediaCall","call","answer","addMediaConectionListeners","on","data","peerId","forEach","getTracks","track","stop","getVideoTracks","filter","stopAllStreams","error","connect","useEffect","Input","onChange","event","target","value","placeholder","Button","variant","color","onClick","margin","fontSize","link","window","location","protocol","host","clipboard","writeText","Switch","checked","name","inputProps","close","App","className","webpackEmptyContext","req","e","Error","code","keys","resolve","module","exports"],"mappings":"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","file":"static/js/4.61a6474a.chunk.js","sourcesContent":["import React, { useEffect } from 'react'\nimport ReactPlayer from 'react-player'\n\nexport default function VideoChat(props: any) {\n    // console.log(props.peerStreams);\n    let width = \"100%\";\n    let height = \"100%\";\n    if (props.peerStreams.length > 0) {\n        width = `${100 / props.peerStreams.length}%`\n        height = `${100 / props.peerStreams.length}%`\n    }\n\n    return (\n        <div style={{ position: \"relative\", top: 0, right: 0, marginBottom: 25, marginTop: 25 }} >\n            <ul>\n                {props.peerStreams?.map((stream: MediaStream) => (\n                    <li key={stream.id}>\n                        <ReactPlayer url={stream} playing={true} width={width} height={height} />\n                    </li>\n                ))}\n            </ul>\n            <div style={{ position: \"absolute\", top: 0, right: 0 }}>\n                <ReactPlayer url={props.userStream} playing={true} width=\"25%\" height=\"25%\" />\n            </div>\n        </div>\n    )\n}\n","import Peer, { DataConnection, MediaConnection } from 'peerjs';\nimport React, { useState, useEffect, useCallback } from 'react'\nimport { Button, Input, TextField } from '@material-ui/core';\nimport VideoChat from \"./VideoChat\";\nimport { Switch } from '@material-ui/core/';\nimport VideoCallIcon from '@material-ui/icons/VideoCall';\nimport ShareIcon from '@material-ui/icons/Share';\nimport { useLocation } from \"react-router-dom\";\nimport { Stream } from 'stream';\n\nexport default function PeerJs() {\n    const [id, setId] = useState(\"\");\n    const [peer, setPeer] = useState(new Peer());\n    const [friendId, setFriendId] = useState('');\n    const [linkCopied, setLinkCopied] = useState(false);\n    const [dataConnection, setDataConnection] = useState<DataConnection | null>(null);\n    const [mediaConnection, setMediaConnection] = useState<MediaConnection | null>(null);\n    const [peerStreams, setPeerStreams] = useState<MediaStream[] | []>([]);\n    const [userStream, setUserStream] = useState<MediaStream | null>(null);\n    const [shareScreen, setShareScreen] = useState<boolean>(false);\n\n    function useQuery() {\n        return new URLSearchParams(useLocation().search);\n    }\n\n    // Clean this up later\n    let query = useQuery();\n    let friend = query.get(\"friend\");\n    if (friend && friendId === '') {\n        setFriendId(friend);\n    }\n\n    function handleNewPeer(id: string) {\n        setId(id)\n    }\n\n\n    function handlePeerDataConnection(conn: DataConnection) {\n        conn = addDataConnectionListeners(conn);\n        setDataConnection(conn);\n        setFriendId(conn.peer);\n    }\n\n    function getAvailableConstraints() {\n        // TODO: Get specific constraints\n        return { audio: false, video: true };\n    }\n\n    async function getUserStream() {\n        let constraints = getAvailableConstraints();\n        try {\n            let stream: MediaStream;\n            if (shareScreen) {\n                // @ts-ignore\n                stream = await navigator.mediaDevices.getDisplayMedia(constraints);\n            } else {\n                stream = await navigator.mediaDevices.getUserMedia(constraints);\n            }\n            return stream;\n        } catch (error) {\n            console.log(error);\n        }\n    }\n\n    async function handlePeerRecieveMediaCall(call: MediaConnection) {\n        // TODO: Add an answer or decline prompt\n        setFriendId(call.peer);\n        let stream = await getUserStream();\n        if (stream) {\n            setUserStream(stream);\n            call.answer(stream);\n            call = addMediaConectionListeners(call);\n            setMediaConnection(call);\n        }\n    }\n\n    function addDataConnectionListeners(conn: DataConnection) {\n        conn.on('open', () => {\n            console.log(\"Connected opened with peer: \" + conn.peer);\n        });\n        conn.on('data', (data: any) => {\n            // TODO: Set this to state.\n            console.log(data);\n        });\n        conn.on('close', () => {\n            console.log(\"Connection closed.\");\n            // TODO: Fix issue where user streams aren't being stopped on friend close\n            console.log(userStream);\n            stopPeerStream(conn.peer);\n            if (peerStreams.length == 0) {\n                stopAllStreams();\n            }\n        });\n        conn.on('error', (error: any) => {\n            // Handle error\n            console.log(error);\n        });\n        return conn;\n    }\n\n    function addMediaConectionListeners(call: MediaConnection) {\n        call.on('stream', (stream) => setPeerStreams(peerStreams => [...peerStreams, stream]));\n        call.on('error', (error: any) => console.log(error));\n        return call;\n    }\n\n    function stopAllStreams() {\n        if (userStream) {\n            userStream.getTracks().forEach(track => track.stop());\n            userStream.getVideoTracks().forEach(track => track.stop());\n            console.log(\"User stream tracks stopped\");\n        }\n        if (peerStreams) {\n            peerStreams.forEach((peer: MediaStream) => {\n                peer.getTracks().forEach(track => track.stop());\n                peer.getVideoTracks().forEach(track => track.stop());\n            });\n            console.log(\"Peer streams stopped\");\n        }\n        setUserStream(null);\n        setMediaConnection(null);\n        setPeerStreams(() => []);\n    }\n\n    function stopPeerStream(peerId: string) {\n        peerStreams?.forEach((stream: MediaStream) => {\n            if (stream.id === peerId) {\n                stream.getTracks().forEach(track => track.stop());\n                stream.getVideoTracks().forEach(track => track.stop());\n            }\n        });\n        setPeerStreams((peerStreams) => peerStreams.filter(stream => stream.id !== peerId));\n    }\n\n    useEffect(() => {\n        peer.on('open', handleNewPeer);\n        peer.on('connection', handlePeerDataConnection);\n        peer.on('call', handlePeerRecieveMediaCall);\n        console.log(\"Peer initialized\");\n    }, [peer]);\n\n    useEffect(() => {\n        console.log(userStream);\n    }, [userStream])\n\n    function send(conn: DataConnection) {\n        conn.send('Hello!');\n    }\n\n    function connect() {\n        let conn = peer.connect(friendId);\n        conn = addDataConnectionListeners(conn);\n        setDataConnection(conn);\n    }\n\n    function disconnectMediaConnection() {\n        mediaConnection?.close();\n        dataConnection?.close();\n        setMediaConnection(null);\n        stopAllStreams();\n        setFriendId('');\n    }\n\n    async function call() {\n        try {\n            let stream: MediaStream;\n            if (shareScreen) {\n                // @ts-ignore\n                stream = await navigator.mediaDevices.getDisplayMedia({ audio: false, video: true });\n            } else {\n                stream = await navigator.mediaDevices.getUserMedia({ audio: false, video: true });\n            }\n\n            let call = peer.call(friendId, stream);\n            call = addMediaConectionListeners(call);\n            setMediaConnection(call);\n            setUserStream(stream);\n            connect();\n        } catch (error) {\n            console.log(error);\n        }\n    }\n\n    const handleSwitchChange = (event: any) => {\n        setShareScreen(event.target.checked)\n    };\n\n    function generateLink() {\n        if (id) {\n            let link = window.location.protocol + \"//\" + window.location.host + \"/?friend=\" + id\n            navigator.clipboard.writeText(\"Hey Friend! Give me a call using this link :\\n\" + link)\n            setLinkCopied(true);\n        }\n    }\n\n    return (\n        <div>\n            <Input onChange={event => setFriendId(event.target.value)} placeholder=\"Caller ID\" />\n            {/* <Button variant=\"contained\" color=\"primary\" onClick={send}> Send </Button>\n            <Button variant=\"contained\" color=\"primary\" onClick={connect}> Conect </Button> */}\n            <Button variant=\"contained\" color=\"primary\" onClick={call} style={{ margin: 10 }}> <VideoCallIcon fontSize=\"large\" /> </Button>\n\n            <Button variant=\"contained\" color=\"primary\" onClick={generateLink}> <ShareIcon fontSize=\"large\" /> </Button>\n            {linkCopied ? <div style={{ fontSize: 15, color: \"green\" }}>Link copied to clipboard</div> : null}\n            <br />\n            <Switch\n                checked={shareScreen}\n                onChange={handleSwitchChange}\n                color=\"primary\"\n                name=\"checkedB\"\n                inputProps={{ 'aria-label': 'primary checkbox' }}\n            /> Share Screen\n            < div >\n                {\"Your Caller ID: \" + id}\n                < br />\n                {(friendId !== '') ? \"Connecting to: \" + friendId : null}\n            </div >\n            <VideoChat peerStreams={peerStreams} userStream={userStream} />\n            <div>\n                {\n                    mediaConnection\n                        ? <Button variant=\"contained\" color=\"secondary\" onClick={disconnectMediaConnection}> Disconnect </Button>\n                        : null\n                }\n\n            </div>\n        </div >\n    )\n}\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n// import InstallButton from './components/InstallButton';\nimport RequestButton from './components/RequestButton';\nimport PeerJs from './components/PeerJs';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        {/* <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p> Hello James </p> */}\n        {/* <InstallButton /> */}\n        {/* <RequestButton /> */}\n        <PeerJs />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 67;"],"sourceRoot":""}