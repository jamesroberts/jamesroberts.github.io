[{"/home/james/fun/jamesroberts.github.io/src/index.tsx":"1","/home/james/fun/jamesroberts.github.io/src/App.tsx":"2","/home/james/fun/jamesroberts.github.io/src/components/InstallButton.tsx":"3","/home/james/fun/jamesroberts.github.io/src/components/RequestButton.tsx":"4","/home/james/fun/jamesroberts.github.io/src/components/PeerJs.tsx":"5"},{"size":506,"mtime":1611426905730,"results":"6","hashOfConfig":"7"},{"size":550,"mtime":1611478788304,"results":"8","hashOfConfig":"7"},{"size":1588,"mtime":1611431529620,"results":"9","hashOfConfig":"7"},{"size":659,"mtime":1611434421440,"results":"10","hashOfConfig":"7"},{"size":3233,"mtime":1611482095264,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"168mqwp",{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23"},"/home/james/fun/jamesroberts.github.io/src/index.tsx",[],["24","25"],"/home/james/fun/jamesroberts.github.io/src/App.tsx",[],"/home/james/fun/jamesroberts.github.io/src/components/InstallButton.tsx",[],"/home/james/fun/jamesroberts.github.io/src/components/RequestButton.tsx",[],"/home/james/fun/jamesroberts.github.io/src/components/PeerJs.tsx",["26","27"],"import Peer from 'peerjs';\nimport React, { useState, useEffect, useRef } from 'react'\nimport { Button, Input } from '@material-ui/core';\nimport ReactPlayer from 'react-player'\n\nexport default function PeerJs() {\n\n    const [id, setId] = useState(\"\");\n    const [peer, setPeer] = useState(new Peer());\n    const [friendId, setFriendId] = useState('');\n    const [conn, setConn] = useState<any>(null);\n    const [stream, setStream] = useState<any>(null);\n\n    useEffect(() => {\n        peer.on('open', function (id: any) {\n            setId(id)\n        });\n\n        peer.on('connection', function (conn: any) {\n            conn.on('data', function (data: any) {\n                console.log(data);\n            });\n            conn.on('open', () => {\n                console.log(\"Connection opened\");\n                console.log(\"Connected to :\" + conn.peer);\n            });\n            setConn(conn);\n            setFriendId(conn.peer);\n        });\n        peer.on('call', function (call) {\n            // Answer the call, providing our mediaStream\n            setFriendId(call.peer);\n            navigator.mediaDevices.getUserMedia({ audio: false, video: true })\n                .then(function (mediaStream) {\n                    console.log(\"Answering media stream..\");\n                    console.log(mediaStream);\n                    call.answer(mediaStream);\n                    call.on('stream', function (stream) {\n                        console.log(\"Setting stream from caller\");\n                        setStream(stream);\n                    });\n                })\n                .catch(function (err) {\n                    console.log(err);\n                });\n        });\n\n        console.log(\"Peer initialized\");\n    }, [peer]);\n\n\n    function send() {\n        if (conn) {\n            conn.send('Hello!');\n        }\n    }\n\n    function connect() {\n        console.log(\"Connecting...\");\n        let conn = peer.connect(friendId);\n        conn.on('data', function (data: any) {\n            console.log(data);\n        });\n        setConn(conn);\n    }\n\n    function call() {\n        console.log(\"Calling...\");\n        navigator.mediaDevices.getUserMedia({ audio: false, video: true })\n            .then(function (stream) {\n                let call = peer.call(friendId, stream);\n                call.on('stream', function (stream) {\n                    console.log(\"Setting stream from peer\");\n                    setStream(stream);\n                });\n                setConn(call);\n            })\n            .catch(function (err) {\n                console.log(err);\n            });\n    }\n\n    return (\n        <div>\n            <Input onChange={event => setFriendId(event.target.value)} />\n            <Button variant=\"contained\" color=\"primary\" onClick={send}> Send </Button>\n            <Button variant=\"contained\" color=\"primary\" onClick={connect}> Conect </Button>\n            <Button variant=\"contained\" color=\"primary\" onClick={call}> Call </Button>\n\n            <div>\n                {\"MY ID: \" + id}\n                <br />\n                {\"Connecting to: \" + friendId}\n            </div>\n            <div>\n                <ReactPlayer url={stream} playing={true} />\n            </div>\n        </div>\n    )\n}\n\n\n\n\n\n",{"ruleId":"28","replacedBy":"29"},{"ruleId":"30","replacedBy":"31"},{"ruleId":"32","severity":1,"message":"33","line":2,"column":38,"nodeType":"34","messageId":"35","endLine":2,"endColumn":44},{"ruleId":"32","severity":1,"message":"36","line":9,"column":18,"nodeType":"34","messageId":"35","endLine":9,"endColumn":25},"no-native-reassign",["37"],"no-negated-in-lhs",["38"],"@typescript-eslint/no-unused-vars","'useRef' is defined but never used.","Identifier","unusedVar","'setPeer' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]